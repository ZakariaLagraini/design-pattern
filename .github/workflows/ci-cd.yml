name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: Zaratapa1
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres-user:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Zaratapa1
          POSTGRES_DB: user_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres-catalog:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Zaratapa1
          POSTGRES_DB: catalog_db
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # Start Service Registry first
    - name: Build and Start Service Registry
      run: |
        cd service-registry
        chmod +x mvnw
        ./mvnw spring-boot:run &
        echo "Waiting for Service Registry to start..."
        while ! nc -z localhost 8761; do
          sleep 1
        done
        echo "Service Registry is up"

    # Then run other services
    - name: Build and Analyze User Management Service
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/user_db
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: Zaratapa1
      run: |
        cd user-management-service
        chmod +x mvnw
        ./mvnw verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=design-pattern_design-pattern \
          -Dsonar.organization=design-pattern \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    - name: Build and Analyze Design Pattern Catalog Service
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5433/catalog_db
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: Zaratapa1
      run: |
        cd design-pattern-catalog-service
        chmod +x mvnw
        ./mvnw verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=design-pattern_design-pattern \
          -Dsonar.organization=design-pattern \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        
    - name: Build and Analyze Recommendation Engine Service
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd recommendation-engine-service
        chmod +x mvnw
        ./mvnw verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=design-pattern_design-pattern \
          -Dsonar.organization=design-pattern \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        
    - name: Build and Analyze AI Helper Service
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd ai-helper-service
        chmod +x mvnw
        ./mvnw verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=design-pattern_design-pattern \
          -Dsonar.organization=design-pattern \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        
    - name: Build and Analyze API Gateway
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd api-gateway
        chmod +x mvnw
        ./mvnw verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=design-pattern_design-pattern \
          -Dsonar.organization=design-pattern \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    # Upload artifacts for next job
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          */target/*.jar
        retention-days: 1

  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v3
    
    # Download artifacts from previous job
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: .

    - name: Set lowercase repository owner
      run: |
        echo "OWNER=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV
        echo "Repository owner: $OWNER"
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Debug step to check files
    - name: List files
      run: |
        echo "Current directory:"
        pwd
        echo "Files in current directory:"
        ls -R

    # Build and push Service Registry
    - name: Build and push Service Registry
      run: |
        echo "Building service-registry..."
        cd service-registry
        mv target/*.jar app.jar
        docker build -t ${{ env.REGISTRY }}/${{ env.OWNER }}/design-pattern/service-registry:latest .
        echo "Pushing service-registry..."
        docker push ${{ env.REGISTRY }}/${{ env.OWNER }}/design-pattern/service-registry:latest

    # Build and push User Management Service
    - name: Build and push User Management Service
      run: |
        echo "Building user-management..."
        cd user-management-service
        mv target/*.jar app.jar
        docker build -t ${{ env.REGISTRY }}/${{ env.OWNER }}/design-pattern/user-management:latest .
        echo "Pushing user-management..."
        docker push ${{ env.REGISTRY }}/${{ env.OWNER }}/design-pattern/user-management:latest

    # Continue with other services...
    # (Similar pattern for other services)