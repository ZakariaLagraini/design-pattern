name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres-user:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: user_db
        ports:
          - 5434:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres-catalog:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: catalog_db
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # Build and test services in the correct order
    - name: Build Service Registry
      run: |
        cd service-registry
        chmod +x mvnw
        ./mvnw clean package -DskipTests
        
    - name: Build User Management Service
      run: |
        cd user-management-service
        chmod +x mvnw
        ./mvnw clean package -DskipTests
        
    - name: Build Design Pattern Catalog Service
      run: |
        cd design-pattern-catalog-service
        chmod +x mvnw
        ./mvnw clean package -DskipTests
        
    - name: Build Recommendation Engine Service
      run: |
        cd recommendation-engine-service
        chmod +x mvnw
        ./mvnw clean package -DskipTests
        
    - name: Build AI Helper Service
      run: |
        cd ai-helper-service
        chmod +x mvnw
        ./mvnw clean package -DskipTests
        
    - name: Build API Gateway
      run: |
        cd api-gateway
        chmod +x mvnw
        ./mvnw clean package -DskipTests

  docker-build-push:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Build and push Service Registry first
    - name: Build and push Service Registry
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ github.repository }}/service-registry:latest ./service-registry
        docker push ${{ env.REGISTRY }}/${{ github.repository }}/service-registry:latest

    # Build and push User Management Service
    - name: Build and push User Management Service
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ github.repository }}/user-management:latest ./user-management-service
        docker push ${{ env.REGISTRY }}/${{ github.repository }}/user-management:latest

    # Build and push Design Pattern Catalog Service
    - name: Build and push Design Pattern Catalog Service
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ github.repository }}/design-pattern-catalog:latest ./design-pattern-catalog-service
        docker push ${{ env.REGISTRY }}/${{ github.repository }}/design-pattern-catalog:latest

    # Build and push Recommendation Engine Service
    - name: Build and push Recommendation Engine Service
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ github.repository }}/recommendation-engine:latest ./recommendation-engine-service
        docker push ${{ env.REGISTRY }}/${{ github.repository }}/recommendation-engine:latest

    # Build and push AI Helper Service
    - name: Build and push AI Helper Service
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ github.repository }}/ai-helper:latest ./ai-helper-service
        docker push ${{ env.REGISTRY }}/${{ github.repository }}/ai-helper:latest

    # Build and push API Gateway
    - name: Build and push API Gateway
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ github.repository }}/api-gateway:latest ./api-gateway
        docker push ${{ env.REGISTRY }}/${{ github.repository }}/api-gateway:latest