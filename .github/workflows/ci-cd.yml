name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  JAVA_VERSION: '17'

jobs:
  verify-versions:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    # Check Spring Boot versions consistency
    - name: Check Spring Boot versions
      run: |
        VERSIONS=$(grep -r "<version>3" */pom.xml | grep "spring-boot-starter-parent" | awk -F'>' '{print $2}' | awk -F'<' '{print $1}' | sort | uniq)
        if [ $(echo "$VERSIONS" | wc -l) -gt 1 ]; then
          echo "Multiple Spring Boot versions found: $VERSIONS"
          echo "Please align all services to use the same Spring Boot version"
          exit 1
        fi

  build-and-test:
    needs: verify-versions
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Zaratapa1
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    # Build and test Service Registry first
    - name: Build Service Registry
      run: |
        cd service-registry
        chmod +x mvnw
        ./mvnw clean verify
        
    # Build and test API Gateway
    - name: Build API Gateway
      run: |
        cd api-gateway
        chmod +x mvnw
        ./mvnw clean verify
        
    # Build and test other services in parallel
    - name: Build User Management Service
      run: |
        cd user-management-service
        chmod +x mvnw
        ./mvnw clean verify -Dspring.profiles.active=test
        
    - name: Build Design Pattern Catalog Service
      run: |
        cd design-pattern-catalog-service
        chmod +x mvnw
        ./mvnw clean verify -Dspring.profiles.active=test
        
    - name: Build Recommendation Engine Service
      run: |
        cd recommendation-engine-service
        chmod +x mvnw
        ./mvnw clean verify -Dspring.profiles.active=test
        
    - name: Build AI Helper Service
      run: |
        cd ai-helper-service
        chmod +x mvnw
        ./mvnw clean verify -Dspring.profiles.active=test

  docker-build-push:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [
          'service-registry',
          'api-gateway',
          'user-management-service',
          'design-pattern-catalog-service',
          'recommendation-engine-service',
          'ai-helper-service'
        ]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=sha,format=long
          type=ref,event=branch
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: docker-build-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deployment would happen here"
        # Add your deployment steps here